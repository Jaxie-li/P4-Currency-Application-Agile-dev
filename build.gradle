plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'jacoco'
}

group 'com'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

//sourceCompatibility = '17'
//targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'currencyConverter.CurrencyConverterApp'
}

javafx {
    version = '18.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

//Provide Stable Test Environment
task replace(type:Exec){
    commandLine './test.sh'
}

test {
    dependsOn(replace)
    useJUnitPlatform()
    test.finalizedBy jacocoTestReport // After gradle run, do gradle jacocoTestReport. It is to say it will auto generate jacocoTestReport
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

jacocoTestReport{
    reports{
        html.required = true
        csv.required = true
    }

    //Exclude all GUI Related test coverage
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['currencyConverter/controller/*'])
        }))
    }
}


